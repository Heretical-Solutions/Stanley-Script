//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /SSD1/Repositories/Unity/Heretical Solutions/Stanley Script Unity/Assets/Scripts/Stanley script/Grammars/StanleyParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HereticalSolutions.StanleyScript.Grammars {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class StanleyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SPACE=1, COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, REFER_TO=5, STORY=6, 
		SHOULD_BE=7, A=8, THE=9, AND=10, AT=11, AS=12, OF=13, TO=14, HAD=15, HAS=16, 
		HAVE=17, PASSED=18, WAS=19, WERE=20, CLOSIEST=21, FURTHEST=22, RANDOM=23, 
		STRONGEST=24, UNIQUE=25, WEAKEST=26, MINUTES=27, SECONDS=28, STAR=29, 
		DIVIDE=30, MODULE=31, PLUS=32, MINUS=33, EQUAL_SYMBOL=34, GREATER_SYMBOL=35, 
		LESS_SYMBOL=36, EXCLAMATION_SYMBOL=37, DOT=38, LR_BRACKET=39, RR_BRACKET=40, 
		COMMA=41, SEMI=42, AT_SIGN=43, ZERO_DECIMAL=44, ONE_DECIMAL=45, TWO_DECIMAL=46, 
		SINGLE_QUOTE_SYMB=47, DOUBLE_QUOTE_SYMB=48, REVERSE_QUOTE_SYMB=49, COLON_SYMB=50, 
		DOLLAR_SYMB=51, STRING_LITERAL=52, DECIMAL_LITERAL=53, REAL_LITERAL=54, 
		ID=55, REVERSE_QUOTE_ID=56, ERROR_RECONGNIGION=57;
	public const int
		RULE_script = 0, RULE_storyHeader = 1, RULE_statement = 2, RULE_defineStatement = 3, 
		RULE_defineSubject = 4, RULE_commandStatement = 5, RULE_timeStatement = 6, 
		RULE_actionStatement = 7, RULE_actionWithSubject = 8, RULE_actionWithArguments = 9, 
		RULE_objectArgument = 10, RULE_pluralSubjectsExpression = 11, RULE_relatableSubjectExpression = 12, 
		RULE_relatablePluralSubjectsExpression = 13, RULE_relatableSingleSubjectExpression = 14, 
		RULE_subjectExpression = 15, RULE_selectedSubject = 16, RULE_pluralObjectsExpression = 17, 
		RULE_objectExpression = 18, RULE_selectedObject = 19, RULE_selectionAdjective = 20, 
		RULE_relativeSelectionAdjective = 21, RULE_assertAdjective = 22, RULE_timeExpression = 23, 
		RULE_timeStep = 24, RULE_subject = 25, RULE_object = 26, RULE_action = 27, 
		RULE_importVariableLiteral = 28, RULE_integer = 29, RULE_float = 30, RULE_idLiteral = 31;
	public static readonly string[] ruleNames = {
		"script", "storyHeader", "statement", "defineStatement", "defineSubject", 
		"commandStatement", "timeStatement", "actionStatement", "actionWithSubject", 
		"actionWithArguments", "objectArgument", "pluralSubjectsExpression", "relatableSubjectExpression", 
		"relatablePluralSubjectsExpression", "relatableSingleSubjectExpression", 
		"subjectExpression", "selectedSubject", "pluralObjectsExpression", "objectExpression", 
		"selectedObject", "selectionAdjective", "relativeSelectionAdjective", 
		"assertAdjective", "timeExpression", "timeStep", "subject", "object", 
		"action", "importVariableLiteral", "integer", "float", "idLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'REFER TO'", "'STORY ABOUT'", "'SHOULD BE'", 
		"'A'", "'THE'", "'AND'", "'AT'", "'AS'", "'OF'", "'TO'", "'HAD'", "'HAS'", 
		"'HAVE'", "'PASSED'", "'WAS'", "'WERE'", "'CLOSIEST'", "'FURTHEST'", "'RANDOM'", 
		"'STRONGEST'", "'UNIQUE'", "'WEAKEST'", "'MINUTES'", "'SECONDS'", "'*'", 
		"'/'", "'%'", "'+'", "'-'", "'='", "'>'", "'<'", "'!'", "'.'", "'('", 
		"')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", "'`'", 
		"':'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SPACE", "COMMENT", "COMMENT_INPUT", "LINE_COMMENT", "REFER_TO", 
		"STORY", "SHOULD_BE", "A", "THE", "AND", "AT", "AS", "OF", "TO", "HAD", 
		"HAS", "HAVE", "PASSED", "WAS", "WERE", "CLOSIEST", "FURTHEST", "RANDOM", 
		"STRONGEST", "UNIQUE", "WEAKEST", "MINUTES", "SECONDS", "STAR", "DIVIDE", 
		"MODULE", "PLUS", "MINUS", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", 
		"EXCLAMATION_SYMBOL", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", 
		"AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", 
		"DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", "DOLLAR_SYMB", 
		"STRING_LITERAL", "DECIMAL_LITERAL", "REAL_LITERAL", "ID", "REVERSE_QUOTE_ID", 
		"ERROR_RECONGNIGION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StanleyParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static StanleyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StanleyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StanleyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryHeaderContext storyHeader() {
			return GetRuleContext<StoryHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			storyHeader();
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 65;
				statement();
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 67553994410558240L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryHeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORY() { return GetToken(StanleyParser.STORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public StoryHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryHeaderContext storyHeader() {
		StoryHeaderContext _localctx = new StoryHeaderContext(Context, State);
		EnterRule(_localctx, 2, RULE_storyHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(STORY);
			State = 71;
			subject();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefineStatementContext defineStatement() {
			return GetRuleContext<DefineStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatementContext commandStatement() {
			return GetRuleContext<CommandStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REFER_TO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73;
				defineStatement();
				}
				break;
			case A:
			case THE:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74;
				commandStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFER_TO() { return GetToken(StanleyParser.REFER_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelatableSubjectExpressionContext relatableSubjectExpression() {
			return GetRuleContext<RelatableSubjectExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(StanleyParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefineSubjectContext defineSubject() {
			return GetRuleContext<DefineSubjectContext>(0);
		}
		public DefineStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defineStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefineStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineStatementContext defineStatement() {
		DefineStatementContext _localctx = new DefineStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_defineStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(REFER_TO);
			State = 78;
			relatableSubjectExpression();
			State = 79;
			Match(AS);
			State = 80;
			defineSubject();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineSubjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public DefineSubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defineSubject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefineSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineSubjectContext defineSubject() {
		DefineSubjectContext _localctx = new DefineSubjectContext(Context, State);
		EnterRule(_localctx, 8, RULE_defineSubject);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			subject();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionStatementContext actionStatement() {
			return GetRuleContext<ActionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeStatementContext timeStatement() {
			return GetRuleContext<TimeStatementContext>(0);
		}
		public CommandStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandStatementContext commandStatement() {
		CommandStatementContext _localctx = new CommandStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_commandStatement);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				actionStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				timeStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TimeExpressionContext[] timeExpression() {
			return GetRuleContexts<TimeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeExpressionContext timeExpression(int i) {
			return GetRuleContext<TimeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSED() { return GetToken(StanleyParser.PASSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(StanleyParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(StanleyParser.AND, i);
		}
		public TimeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStatementContext timeStatement() {
		TimeStatementContext _localctx = new TimeStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_timeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			timeExpression();
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 89;
				Match(AND);
				State = 90;
				timeExpression();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 96;
			Match(PASSED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionWithSubjectContext actionWithSubject() {
			return GetRuleContext<ActionWithSubjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionWithArgumentsContext actionWithArguments() {
			return GetRuleContext<ActionWithArgumentsContext>(0);
		}
		public ActionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionStatementContext actionStatement() {
		ActionStatementContext _localctx = new ActionStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_actionStatement);
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case A:
			case THE:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				actionWithSubject();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				actionWithArguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionWithSubjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PluralSubjectsExpressionContext pluralSubjectsExpression() {
			return GetRuleContext<PluralSubjectsExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WERE() { return GetToken(StanleyParser.WERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionWithArgumentsContext actionWithArguments() {
			return GetRuleContext<ActionWithArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubjectExpressionContext subjectExpression() {
			return GetRuleContext<SubjectExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS() { return GetToken(StanleyParser.WAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVE() { return GetToken(StanleyParser.HAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS() { return GetToken(StanleyParser.HAS, 0); }
		public ActionWithSubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionWithSubject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionWithSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionWithSubjectContext actionWithSubject() {
		ActionWithSubjectContext _localctx = new ActionWithSubjectContext(Context, State);
		EnterRule(_localctx, 16, RULE_actionWithSubject);
		int _la;
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102;
				pluralSubjectsExpression();
				State = 103;
				Match(WERE);
				State = 104;
				actionWithArguments();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106;
				subjectExpression();
				State = 107;
				Match(WAS);
				State = 108;
				actionWithArguments();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 110;
				pluralSubjectsExpression();
				State = 111;
				Match(HAVE);
				State = 112;
				actionWithArguments();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114;
				subjectExpression();
				State = 115;
				_la = TokenStream.LA(1);
				if ( !(_la==HAS || _la==HAVE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 116;
				actionWithArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionWithArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectArgumentContext objectArgument() {
			return GetRuleContext<ObjectArgumentContext>(0);
		}
		public ActionWithArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionWithArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionWithArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionWithArgumentsContext actionWithArguments() {
		ActionWithArgumentsContext _localctx = new ActionWithArgumentsContext(Context, State);
		EnterRule(_localctx, 18, RULE_actionWithArguments);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120;
				action();
				State = 121;
				objectArgument();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PluralObjectsExpressionContext pluralObjectsExpression() {
			return GetRuleContext<PluralObjectsExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(StanleyParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(StanleyParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectExpressionContext objectExpression() {
			return GetRuleContext<ObjectExpressionContext>(0);
		}
		public ObjectArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectArgumentContext objectArgument() {
		ObjectArgumentContext _localctx = new ObjectArgumentContext(Context, State);
		EnterRule(_localctx, 20, RULE_objectArgument);
		int _la;
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT || _la==TO) {
					{
					State = 126;
					_la = TokenStream.LA(1);
					if ( !(_la==AT || _la==TO) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 129;
				pluralObjectsExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT || _la==TO) {
					{
					State = 130;
					_la = TokenStream.LA(1);
					if ( !(_la==AT || _la==TO) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 133;
				objectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluralSubjectsExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public PluralSubjectsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pluralSubjectsExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPluralSubjectsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PluralSubjectsExpressionContext pluralSubjectsExpression() {
		PluralSubjectsExpressionContext _localctx = new PluralSubjectsExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_pluralSubjectsExpression);
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				integer();
				State = 137;
				subject();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				subject();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelatableSubjectExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelatablePluralSubjectsExpressionContext relatablePluralSubjectsExpression() {
			return GetRuleContext<RelatablePluralSubjectsExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelatableSingleSubjectExpressionContext relatableSingleSubjectExpression() {
			return GetRuleContext<RelatableSingleSubjectExpressionContext>(0);
		}
		public RelatableSubjectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relatableSubjectExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelatableSubjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelatableSubjectExpressionContext relatableSubjectExpression() {
		RelatableSubjectExpressionContext _localctx = new RelatableSubjectExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_relatableSubjectExpression);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 142;
				relatablePluralSubjectsExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143;
				relatableSingleSubjectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelatablePluralSubjectsExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelatableSingleSubjectExpressionContext[] relatableSingleSubjectExpression() {
			return GetRuleContexts<RelatableSingleSubjectExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelatableSingleSubjectExpressionContext relatableSingleSubjectExpression(int i) {
			return GetRuleContext<RelatableSingleSubjectExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(StanleyParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(StanleyParser.AND, i);
		}
		public RelatablePluralSubjectsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relatablePluralSubjectsExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelatablePluralSubjectsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelatablePluralSubjectsExpressionContext relatablePluralSubjectsExpression() {
		RelatablePluralSubjectsExpressionContext _localctx = new RelatablePluralSubjectsExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_relatablePluralSubjectsExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			relatableSingleSubjectExpression();
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 147;
				Match(AND);
				State = 148;
				relatableSingleSubjectExpression();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AND );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelatableSingleSubjectExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportVariableLiteralContext importVariableLiteral() {
			return GetRuleContext<ImportVariableLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public RelatableSingleSubjectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relatableSingleSubjectExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelatableSingleSubjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelatableSingleSubjectExpressionContext relatableSingleSubjectExpression() {
		RelatableSingleSubjectExpressionContext _localctx = new RelatableSingleSubjectExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_relatableSingleSubjectExpression);
		try {
			State = 155;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR_SYMB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153;
				importVariableLiteral();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154;
				subject();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectedSubjectContext selectedSubject() {
			return GetRuleContext<SelectedSubjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public SubjectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subjectExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubjectExpressionContext subjectExpression() {
		SubjectExpressionContext _localctx = new SubjectExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_subjectExpression);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case A:
			case THE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				selectedSubject();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				subject();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectedSubjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(StanleyParser.A, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectionAdjectiveContext selectionAdjective() {
			return GetRuleContext<SelectionAdjectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(StanleyParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertAdjectiveContext[] assertAdjective() {
			return GetRuleContexts<AssertAdjectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertAdjectiveContext assertAdjective(int i) {
			return GetRuleContext<AssertAdjectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE() { return GetToken(StanleyParser.THE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelativeSelectionAdjectiveContext relativeSelectionAdjective() {
			return GetRuleContext<RelativeSelectionAdjectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(StanleyParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubjectExpressionContext subjectExpression() {
			return GetRuleContext<SubjectExpressionContext>(0);
		}
		public SelectedSubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectedSubject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectedSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectedSubjectContext selectedSubject() {
		SelectedSubjectContext _localctx = new SelectedSubjectContext(Context, State);
		EnterRule(_localctx, 32, RULE_selectedSubject);
		int _la;
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case A:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161;
				Match(A);
				State = 162;
				selectionAdjective();
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==UNIQUE) {
					{
					{
					State = 163;
					assertAdjective();
					}
					}
					State = 168;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 169;
				Match(OF);
				State = 170;
				subject();
				}
				break;
			case THE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172;
				Match(THE);
				State = 173;
				relativeSelectionAdjective();
				State = 174;
				Match(TO);
				State = 175;
				subjectExpression();
				State = 176;
				subject();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluralObjectsExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public PluralObjectsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pluralObjectsExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPluralObjectsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PluralObjectsExpressionContext pluralObjectsExpression() {
		PluralObjectsExpressionContext _localctx = new PluralObjectsExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_pluralObjectsExpression);
		try {
			State = 186;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				integer();
				State = 181;
				@object();
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				@float();
				State = 184;
				@object();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectedObjectContext selectedObject() {
			return GetRuleContext<SelectedObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ObjectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectExpressionContext objectExpression() {
		ObjectExpressionContext _localctx = new ObjectExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_objectExpression);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case A:
			case THE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188;
				selectedObject();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189;
				@object();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectedObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(StanleyParser.A, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectionAdjectiveContext selectionAdjective() {
			return GetRuleContext<SelectionAdjectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(StanleyParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertAdjectiveContext[] assertAdjective() {
			return GetRuleContexts<AssertAdjectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertAdjectiveContext assertAdjective(int i) {
			return GetRuleContext<AssertAdjectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE() { return GetToken(StanleyParser.THE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelativeSelectionAdjectiveContext relativeSelectionAdjective() {
			return GetRuleContext<RelativeSelectionAdjectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(StanleyParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectExpressionContext objectExpression() {
			return GetRuleContext<ObjectExpressionContext>(0);
		}
		public SelectedObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectedObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectedObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectedObjectContext selectedObject() {
		SelectedObjectContext _localctx = new SelectedObjectContext(Context, State);
		EnterRule(_localctx, 38, RULE_selectedObject);
		int _la;
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case A:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				Match(A);
				State = 193;
				selectionAdjective();
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==UNIQUE) {
					{
					{
					State = 194;
					assertAdjective();
					}
					}
					State = 199;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 200;
				Match(OF);
				State = 201;
				@object();
				}
				break;
			case THE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				Match(THE);
				State = 204;
				relativeSelectionAdjective();
				State = 205;
				Match(TO);
				State = 206;
				objectExpression();
				State = 207;
				@object();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionAdjectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM() { return GetToken(StanleyParser.RANDOM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEAKEST() { return GetToken(StanleyParser.WEAKEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRONGEST() { return GetToken(StanleyParser.STRONGEST, 0); }
		public SelectionAdjectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionAdjective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionAdjective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionAdjectiveContext selectionAdjective() {
		SelectionAdjectiveContext _localctx = new SelectionAdjectiveContext(Context, State);
		EnterRule(_localctx, 40, RULE_selectionAdjective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 92274688L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelativeSelectionAdjectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSIEST() { return GetToken(StanleyParser.CLOSIEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FURTHEST() { return GetToken(StanleyParser.FURTHEST, 0); }
		public RelativeSelectionAdjectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relativeSelectionAdjective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelativeSelectionAdjective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelativeSelectionAdjectiveContext relativeSelectionAdjective() {
		RelativeSelectionAdjectiveContext _localctx = new RelativeSelectionAdjectiveContext(Context, State);
		EnterRule(_localctx, 42, RULE_relativeSelectionAdjective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_la = TokenStream.LA(1);
			if ( !(_la==CLOSIEST || _la==FURTHEST) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertAdjectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(StanleyParser.UNIQUE, 0); }
		public AssertAdjectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertAdjective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertAdjective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertAdjectiveContext assertAdjective() {
		AssertAdjectiveContext _localctx = new AssertAdjectiveContext(Context, State);
		EnterRule(_localctx, 44, RULE_assertAdjective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(UNIQUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeStepContext timeStep() {
			return GetRuleContext<TimeStepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public TimeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeExpressionContext timeExpression() {
		TimeExpressionContext _localctx = new TimeExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_timeExpression);
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217;
				integer();
				State = 218;
				timeStep();
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 220;
				@float();
				State = 221;
				timeStep();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDS() { return GetToken(StanleyParser.SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTES() { return GetToken(StanleyParser.MINUTES, 0); }
		public TimeStepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStepContext timeStep() {
		TimeStepContext _localctx = new TimeStepContext(Context, State);
		EnterRule(_localctx, 48, RULE_timeStep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(StanleyParser.STRING_LITERAL, 0); }
		public SubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubjectContext subject() {
		SubjectContext _localctx = new SubjectContext(Context, State);
		EnterRule(_localctx, 50, RULE_subject);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(StanleyParser.STRING_LITERAL, 0); }
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 52, RULE_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdLiteralContext idLiteral() {
			return GetRuleContext<IdLiteralContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 54, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			idLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportVariableLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR_SYMB() { return GetToken(StanleyParser.DOLLAR_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdLiteralContext idLiteral() {
			return GetRuleContext<IdLiteralContext>(0);
		}
		public ImportVariableLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importVariableLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportVariableLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportVariableLiteralContext importVariableLiteral() {
		ImportVariableLiteralContext _localctx = new ImportVariableLiteralContext(Context, State);
		EnterRule(_localctx, 56, RULE_importVariableLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(DOLLAR_SYMB);
			State = 234;
			idLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(StanleyParser.DECIMAL_LITERAL, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 58, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(DECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(StanleyParser.REAL_LITERAL, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 60, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(REAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(StanleyParser.ID, 0); }
		public IdLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdLiteralContext idLiteral() {
		IdLiteralContext _localctx = new IdLiteralContext(Context, State);
		EnterRule(_localctx, 62, RULE_idLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,57,243,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,4,0,67,8,0,11,0,12,0,68,1,1,1,1,
		1,1,1,2,1,2,3,2,76,8,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,3,5,87,8,5,
		1,6,1,6,1,6,5,6,92,8,6,10,6,12,6,95,9,6,1,6,1,6,1,7,1,7,3,7,101,8,7,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,119,
		8,8,1,9,1,9,1,9,1,9,3,9,125,8,9,1,10,3,10,128,8,10,1,10,1,10,3,10,132,
		8,10,1,10,3,10,135,8,10,1,11,1,11,1,11,1,11,3,11,141,8,11,1,12,1,12,3,
		12,145,8,12,1,13,1,13,1,13,4,13,150,8,13,11,13,12,13,151,1,14,1,14,3,14,
		156,8,14,1,15,1,15,3,15,160,8,15,1,16,1,16,1,16,5,16,165,8,16,10,16,12,
		16,168,9,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,179,8,16,
		1,17,1,17,1,17,1,17,1,17,1,17,3,17,187,8,17,1,18,1,18,3,18,191,8,18,1,
		19,1,19,1,19,5,19,196,8,19,10,19,12,19,199,9,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,3,19,210,8,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
		1,23,1,23,1,23,1,23,1,23,3,23,224,8,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
		27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,0,0,32,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,0,5,1,0,16,17,2,0,11,11,14,14,2,0,23,24,26,26,1,0,21,22,
		1,0,27,28,234,0,64,1,0,0,0,2,70,1,0,0,0,4,75,1,0,0,0,6,77,1,0,0,0,8,82,
		1,0,0,0,10,86,1,0,0,0,12,88,1,0,0,0,14,100,1,0,0,0,16,118,1,0,0,0,18,124,
		1,0,0,0,20,134,1,0,0,0,22,140,1,0,0,0,24,144,1,0,0,0,26,146,1,0,0,0,28,
		155,1,0,0,0,30,159,1,0,0,0,32,178,1,0,0,0,34,186,1,0,0,0,36,190,1,0,0,
		0,38,209,1,0,0,0,40,211,1,0,0,0,42,213,1,0,0,0,44,215,1,0,0,0,46,223,1,
		0,0,0,48,225,1,0,0,0,50,227,1,0,0,0,52,229,1,0,0,0,54,231,1,0,0,0,56,233,
		1,0,0,0,58,236,1,0,0,0,60,238,1,0,0,0,62,240,1,0,0,0,64,66,3,2,1,0,65,
		67,3,4,2,0,66,65,1,0,0,0,67,68,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,
		1,1,0,0,0,70,71,5,6,0,0,71,72,3,50,25,0,72,3,1,0,0,0,73,76,3,6,3,0,74,
		76,3,10,5,0,75,73,1,0,0,0,75,74,1,0,0,0,76,5,1,0,0,0,77,78,5,5,0,0,78,
		79,3,24,12,0,79,80,5,12,0,0,80,81,3,8,4,0,81,7,1,0,0,0,82,83,3,50,25,0,
		83,9,1,0,0,0,84,87,3,14,7,0,85,87,3,12,6,0,86,84,1,0,0,0,86,85,1,0,0,0,
		87,11,1,0,0,0,88,93,3,46,23,0,89,90,5,10,0,0,90,92,3,46,23,0,91,89,1,0,
		0,0,92,95,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,93,1,0,
		0,0,96,97,5,18,0,0,97,13,1,0,0,0,98,101,3,16,8,0,99,101,3,18,9,0,100,98,
		1,0,0,0,100,99,1,0,0,0,101,15,1,0,0,0,102,103,3,22,11,0,103,104,5,20,0,
		0,104,105,3,18,9,0,105,119,1,0,0,0,106,107,3,30,15,0,107,108,5,19,0,0,
		108,109,3,18,9,0,109,119,1,0,0,0,110,111,3,22,11,0,111,112,5,17,0,0,112,
		113,3,18,9,0,113,119,1,0,0,0,114,115,3,30,15,0,115,116,7,0,0,0,116,117,
		3,18,9,0,117,119,1,0,0,0,118,102,1,0,0,0,118,106,1,0,0,0,118,110,1,0,0,
		0,118,114,1,0,0,0,119,17,1,0,0,0,120,121,3,54,27,0,121,122,3,20,10,0,122,
		125,1,0,0,0,123,125,3,54,27,0,124,120,1,0,0,0,124,123,1,0,0,0,125,19,1,
		0,0,0,126,128,7,1,0,0,127,126,1,0,0,0,127,128,1,0,0,0,128,129,1,0,0,0,
		129,135,3,34,17,0,130,132,7,1,0,0,131,130,1,0,0,0,131,132,1,0,0,0,132,
		133,1,0,0,0,133,135,3,36,18,0,134,127,1,0,0,0,134,131,1,0,0,0,135,21,1,
		0,0,0,136,137,3,58,29,0,137,138,3,50,25,0,138,141,1,0,0,0,139,141,3,50,
		25,0,140,136,1,0,0,0,140,139,1,0,0,0,141,23,1,0,0,0,142,145,3,26,13,0,
		143,145,3,28,14,0,144,142,1,0,0,0,144,143,1,0,0,0,145,25,1,0,0,0,146,149,
		3,28,14,0,147,148,5,10,0,0,148,150,3,28,14,0,149,147,1,0,0,0,150,151,1,
		0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,27,1,0,0,0,153,156,3,56,28,0,
		154,156,3,50,25,0,155,153,1,0,0,0,155,154,1,0,0,0,156,29,1,0,0,0,157,160,
		3,32,16,0,158,160,3,50,25,0,159,157,1,0,0,0,159,158,1,0,0,0,160,31,1,0,
		0,0,161,162,5,8,0,0,162,166,3,40,20,0,163,165,3,44,22,0,164,163,1,0,0,
		0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,169,1,0,0,0,168,
		166,1,0,0,0,169,170,5,13,0,0,170,171,3,50,25,0,171,179,1,0,0,0,172,173,
		5,9,0,0,173,174,3,42,21,0,174,175,5,14,0,0,175,176,3,30,15,0,176,177,3,
		50,25,0,177,179,1,0,0,0,178,161,1,0,0,0,178,172,1,0,0,0,179,33,1,0,0,0,
		180,181,3,58,29,0,181,182,3,52,26,0,182,187,1,0,0,0,183,184,3,60,30,0,
		184,185,3,52,26,0,185,187,1,0,0,0,186,180,1,0,0,0,186,183,1,0,0,0,187,
		35,1,0,0,0,188,191,3,38,19,0,189,191,3,52,26,0,190,188,1,0,0,0,190,189,
		1,0,0,0,191,37,1,0,0,0,192,193,5,8,0,0,193,197,3,40,20,0,194,196,3,44,
		22,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,
		200,1,0,0,0,199,197,1,0,0,0,200,201,5,13,0,0,201,202,3,52,26,0,202,210,
		1,0,0,0,203,204,5,9,0,0,204,205,3,42,21,0,205,206,5,14,0,0,206,207,3,36,
		18,0,207,208,3,52,26,0,208,210,1,0,0,0,209,192,1,0,0,0,209,203,1,0,0,0,
		210,39,1,0,0,0,211,212,7,2,0,0,212,41,1,0,0,0,213,214,7,3,0,0,214,43,1,
		0,0,0,215,216,5,25,0,0,216,45,1,0,0,0,217,218,3,58,29,0,218,219,3,48,24,
		0,219,224,1,0,0,0,220,221,3,60,30,0,221,222,3,48,24,0,222,224,1,0,0,0,
		223,217,1,0,0,0,223,220,1,0,0,0,224,47,1,0,0,0,225,226,7,4,0,0,226,49,
		1,0,0,0,227,228,5,52,0,0,228,51,1,0,0,0,229,230,5,52,0,0,230,53,1,0,0,
		0,231,232,3,62,31,0,232,55,1,0,0,0,233,234,5,51,0,0,234,235,3,62,31,0,
		235,57,1,0,0,0,236,237,5,53,0,0,237,59,1,0,0,0,238,239,5,54,0,0,239,61,
		1,0,0,0,240,241,5,55,0,0,241,63,1,0,0,0,22,68,75,86,93,100,118,124,127,
		131,134,140,144,151,155,159,166,178,186,190,197,209,223
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace HereticalSolutions.StanleyScript.Grammars
