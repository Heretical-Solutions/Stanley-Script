//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /SSD1/Repositories/Unity/Heretical Solutions/Stanley Script Unity/Assets/Scripts/Stanley script/Grammars/StanleyParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HereticalSolutions.StanleyScript.Grammars {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class StanleyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SPACE=1, COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, REFER_TO=5, STORY=6, 
		SHOULD_BE=7, A=8, AND=9, AT=10, AS=11, OF=12, TO=13, HAD=14, HAS=15, HAVE=16, 
		PASSED=17, WAS=18, WERE=19, CLOSIEST=20, FURTHEST=21, RANDOM=22, STRONGEST=23, 
		UNIQUE=24, WEAKEST=25, MINUTES=26, SECONDS=27, STAR=28, DIVIDE=29, MODULE=30, 
		PLUS=31, MINUS=32, EQUAL_SYMBOL=33, GREATER_SYMBOL=34, LESS_SYMBOL=35, 
		EXCLAMATION_SYMBOL=36, DOT=37, LR_BRACKET=38, RR_BRACKET=39, COMMA=40, 
		SEMI=41, AT_SIGN=42, ZERO_DECIMAL=43, ONE_DECIMAL=44, TWO_DECIMAL=45, 
		SINGLE_QUOTE_SYMB=46, DOUBLE_QUOTE_SYMB=47, REVERSE_QUOTE_SYMB=48, COLON_SYMB=49, 
		DOLLAR_SYMB=50, STRING_LITERAL=51, DECIMAL_LITERAL=52, REAL_LITERAL=53, 
		ID=54, REVERSE_QUOTE_ID=55, ERROR_RECONGNIGION=56;
	public const int
		RULE_script = 0, RULE_storyHeader = 1, RULE_statement = 2, RULE_defineStatement = 3, 
		RULE_commandStatement = 4, RULE_timeStatement = 5, RULE_actionStatement = 6, 
		RULE_actionWithSubject = 7, RULE_actionWithArguments = 8, RULE_objectArgument = 9, 
		RULE_pluralSubjectsExpression = 10, RULE_relatableSubjectExpression = 11, 
		RULE_relatablePluralSubjectsExpression = 12, RULE_relatableSingleSubjectExpression = 13, 
		RULE_subjectExpression = 14, RULE_selectedSubject = 15, RULE_pluralObjectsExpression = 16, 
		RULE_objectExpression = 17, RULE_selectedObject = 18, RULE_selectionAdjective = 19, 
		RULE_assertAdjective = 20, RULE_timeExpression = 21, RULE_timeStep = 22, 
		RULE_subject = 23, RULE_object = 24, RULE_action = 25, RULE_importVariableLiteral = 26, 
		RULE_integer = 27, RULE_float = 28, RULE_idLiteral = 29;
	public static readonly string[] ruleNames = {
		"script", "storyHeader", "statement", "defineStatement", "commandStatement", 
		"timeStatement", "actionStatement", "actionWithSubject", "actionWithArguments", 
		"objectArgument", "pluralSubjectsExpression", "relatableSubjectExpression", 
		"relatablePluralSubjectsExpression", "relatableSingleSubjectExpression", 
		"subjectExpression", "selectedSubject", "pluralObjectsExpression", "objectExpression", 
		"selectedObject", "selectionAdjective", "assertAdjective", "timeExpression", 
		"timeStep", "subject", "object", "action", "importVariableLiteral", "integer", 
		"float", "idLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'REFER TO'", "'STORY ABOUT'", "'SHOULD BE'", 
		"'A'", "'AND'", "'AT'", "'AS'", "'OF'", "'TO'", "'HAD'", "'HAS'", "'HAVE'", 
		"'PASSED'", "'WAS'", "'WERE'", "'CLOSIEST'", "'FURTHEST'", "'RANDOM'", 
		"'STRONGEST'", "'UNIQUE'", "'WEAKEST'", "'MINUTES'", "'SECONDS'", "'*'", 
		"'/'", "'%'", "'+'", "'-'", "'='", "'>'", "'<'", "'!'", "'.'", "'('", 
		"')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", "'`'", 
		"':'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SPACE", "COMMENT", "COMMENT_INPUT", "LINE_COMMENT", "REFER_TO", 
		"STORY", "SHOULD_BE", "A", "AND", "AT", "AS", "OF", "TO", "HAD", "HAS", 
		"HAVE", "PASSED", "WAS", "WERE", "CLOSIEST", "FURTHEST", "RANDOM", "STRONGEST", 
		"UNIQUE", "WEAKEST", "MINUTES", "SECONDS", "STAR", "DIVIDE", "MODULE", 
		"PLUS", "MINUS", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
		"DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
		"ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
		"REVERSE_QUOTE_SYMB", "COLON_SYMB", "DOLLAR_SYMB", "STRING_LITERAL", "DECIMAL_LITERAL", 
		"REAL_LITERAL", "ID", "REVERSE_QUOTE_ID", "ERROR_RECONGNIGION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StanleyParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static StanleyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StanleyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StanleyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryHeaderContext storyHeader() {
			return GetRuleContext<StoryHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			storyHeader();
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 61;
				statement();
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 33776997205279008L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryHeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORY() { return GetToken(StanleyParser.STORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public StoryHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoryHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoryHeaderContext storyHeader() {
		StoryHeaderContext _localctx = new StoryHeaderContext(Context, State);
		EnterRule(_localctx, 2, RULE_storyHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(STORY);
			State = 67;
			subject();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefineStatementContext defineStatement() {
			return GetRuleContext<DefineStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandStatementContext commandStatement() {
			return GetRuleContext<CommandStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REFER_TO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69;
				defineStatement();
				}
				break;
			case A:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70;
				commandStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFER_TO() { return GetToken(StanleyParser.REFER_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelatableSubjectExpressionContext relatableSubjectExpression() {
			return GetRuleContext<RelatableSubjectExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(StanleyParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public DefineStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defineStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefineStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineStatementContext defineStatement() {
		DefineStatementContext _localctx = new DefineStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_defineStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(REFER_TO);
			State = 74;
			relatableSubjectExpression();
			State = 75;
			Match(AS);
			State = 76;
			subject();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionStatementContext actionStatement() {
			return GetRuleContext<ActionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeStatementContext timeStatement() {
			return GetRuleContext<TimeStatementContext>(0);
		}
		public CommandStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandStatementContext commandStatement() {
		CommandStatementContext _localctx = new CommandStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_commandStatement);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				actionStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 79;
				timeStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TimeExpressionContext[] timeExpression() {
			return GetRuleContexts<TimeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeExpressionContext timeExpression(int i) {
			return GetRuleContext<TimeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSED() { return GetToken(StanleyParser.PASSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(StanleyParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(StanleyParser.AND, i);
		}
		public TimeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStatementContext timeStatement() {
		TimeStatementContext _localctx = new TimeStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_timeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			timeExpression();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 83;
				Match(AND);
				State = 84;
				timeExpression();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90;
			Match(PASSED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionWithSubjectContext actionWithSubject() {
			return GetRuleContext<ActionWithSubjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionWithArgumentsContext actionWithArguments() {
			return GetRuleContext<ActionWithArgumentsContext>(0);
		}
		public ActionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionStatementContext actionStatement() {
		ActionStatementContext _localctx = new ActionStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_actionStatement);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case A:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				actionWithSubject();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93;
				actionWithArguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionWithSubjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PluralSubjectsExpressionContext pluralSubjectsExpression() {
			return GetRuleContext<PluralSubjectsExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WERE() { return GetToken(StanleyParser.WERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionWithArgumentsContext actionWithArguments() {
			return GetRuleContext<ActionWithArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubjectExpressionContext subjectExpression() {
			return GetRuleContext<SubjectExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS() { return GetToken(StanleyParser.WAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVE() { return GetToken(StanleyParser.HAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS() { return GetToken(StanleyParser.HAS, 0); }
		public ActionWithSubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionWithSubject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionWithSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionWithSubjectContext actionWithSubject() {
		ActionWithSubjectContext _localctx = new ActionWithSubjectContext(Context, State);
		EnterRule(_localctx, 14, RULE_actionWithSubject);
		int _la;
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				pluralSubjectsExpression();
				State = 97;
				Match(WERE);
				State = 98;
				actionWithArguments();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100;
				subjectExpression();
				State = 101;
				Match(WAS);
				State = 102;
				actionWithArguments();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104;
				pluralSubjectsExpression();
				State = 105;
				Match(HAVE);
				State = 106;
				actionWithArguments();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 108;
				subjectExpression();
				State = 109;
				_la = TokenStream.LA(1);
				if ( !(_la==HAS || _la==HAVE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 110;
				actionWithArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionWithArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectArgumentContext objectArgument() {
			return GetRuleContext<ObjectArgumentContext>(0);
		}
		public ActionWithArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionWithArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionWithArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionWithArgumentsContext actionWithArguments() {
		ActionWithArgumentsContext _localctx = new ActionWithArgumentsContext(Context, State);
		EnterRule(_localctx, 16, RULE_actionWithArguments);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114;
				action();
				State = 115;
				objectArgument();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PluralObjectsExpressionContext pluralObjectsExpression() {
			return GetRuleContext<PluralObjectsExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(StanleyParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(StanleyParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectExpressionContext objectExpression() {
			return GetRuleContext<ObjectExpressionContext>(0);
		}
		public ObjectArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectArgumentContext objectArgument() {
		ObjectArgumentContext _localctx = new ObjectArgumentContext(Context, State);
		EnterRule(_localctx, 18, RULE_objectArgument);
		int _la;
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT || _la==TO) {
					{
					State = 120;
					_la = TokenStream.LA(1);
					if ( !(_la==AT || _la==TO) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 123;
				pluralObjectsExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT || _la==TO) {
					{
					State = 124;
					_la = TokenStream.LA(1);
					if ( !(_la==AT || _la==TO) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 127;
				objectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluralSubjectsExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public PluralSubjectsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pluralSubjectsExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPluralSubjectsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PluralSubjectsExpressionContext pluralSubjectsExpression() {
		PluralSubjectsExpressionContext _localctx = new PluralSubjectsExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_pluralSubjectsExpression);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				integer();
				State = 131;
				subject();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				subject();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelatableSubjectExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelatablePluralSubjectsExpressionContext relatablePluralSubjectsExpression() {
			return GetRuleContext<RelatablePluralSubjectsExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelatableSingleSubjectExpressionContext relatableSingleSubjectExpression() {
			return GetRuleContext<RelatableSingleSubjectExpressionContext>(0);
		}
		public RelatableSubjectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relatableSubjectExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelatableSubjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelatableSubjectExpressionContext relatableSubjectExpression() {
		RelatableSubjectExpressionContext _localctx = new RelatableSubjectExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_relatableSubjectExpression);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				relatablePluralSubjectsExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				relatableSingleSubjectExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelatablePluralSubjectsExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelatableSingleSubjectExpressionContext[] relatableSingleSubjectExpression() {
			return GetRuleContexts<RelatableSingleSubjectExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelatableSingleSubjectExpressionContext relatableSingleSubjectExpression(int i) {
			return GetRuleContext<RelatableSingleSubjectExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(StanleyParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(StanleyParser.AND, i);
		}
		public RelatablePluralSubjectsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relatablePluralSubjectsExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelatablePluralSubjectsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelatablePluralSubjectsExpressionContext relatablePluralSubjectsExpression() {
		RelatablePluralSubjectsExpressionContext _localctx = new RelatablePluralSubjectsExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_relatablePluralSubjectsExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			relatableSingleSubjectExpression();
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 141;
				Match(AND);
				State = 142;
				relatableSingleSubjectExpression();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AND );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelatableSingleSubjectExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportVariableLiteralContext importVariableLiteral() {
			return GetRuleContext<ImportVariableLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public RelatableSingleSubjectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relatableSingleSubjectExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelatableSingleSubjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelatableSingleSubjectExpressionContext relatableSingleSubjectExpression() {
		RelatableSingleSubjectExpressionContext _localctx = new RelatableSingleSubjectExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_relatableSingleSubjectExpression);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR_SYMB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				importVariableLiteral();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				subject();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectedSubjectContext selectedSubject() {
			return GetRuleContext<SelectedSubjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public SubjectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subjectExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubjectExpressionContext subjectExpression() {
		SubjectExpressionContext _localctx = new SubjectExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_subjectExpression);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case A:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151;
				selectedSubject();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				subject();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectedSubjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(StanleyParser.A, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectionAdjectiveContext selectionAdjective() {
			return GetRuleContext<SelectionAdjectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(StanleyParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertAdjectiveContext[] assertAdjective() {
			return GetRuleContexts<AssertAdjectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertAdjectiveContext assertAdjective(int i) {
			return GetRuleContext<AssertAdjectiveContext>(i);
		}
		public SelectedSubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectedSubject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectedSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectedSubjectContext selectedSubject() {
		SelectedSubjectContext _localctx = new SelectedSubjectContext(Context, State);
		EnterRule(_localctx, 30, RULE_selectedSubject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(A);
			State = 156;
			selectionAdjective();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==UNIQUE) {
				{
				{
				State = 157;
				assertAdjective();
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 163;
			Match(OF);
			State = 164;
			subject();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluralObjectsExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public PluralObjectsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pluralObjectsExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPluralObjectsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PluralObjectsExpressionContext pluralObjectsExpression() {
		PluralObjectsExpressionContext _localctx = new PluralObjectsExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_pluralObjectsExpression);
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166;
				integer();
				State = 167;
				@object();
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				@float();
				State = 170;
				@object();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectedObjectContext selectedObject() {
			return GetRuleContext<SelectedObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ObjectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectExpressionContext objectExpression() {
		ObjectExpressionContext _localctx = new ObjectExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_objectExpression);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case A:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				selectedObject();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				@object();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectedObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(StanleyParser.A, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectionAdjectiveContext selectionAdjective() {
			return GetRuleContext<SelectionAdjectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(StanleyParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertAdjectiveContext[] assertAdjective() {
			return GetRuleContexts<AssertAdjectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertAdjectiveContext assertAdjective(int i) {
			return GetRuleContext<AssertAdjectiveContext>(i);
		}
		public SelectedObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectedObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectedObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectedObjectContext selectedObject() {
		SelectedObjectContext _localctx = new SelectedObjectContext(Context, State);
		EnterRule(_localctx, 36, RULE_selectedObject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(A);
			State = 179;
			selectionAdjective();
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==UNIQUE) {
				{
				{
				State = 180;
				assertAdjective();
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 186;
			Match(OF);
			State = 187;
			@object();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionAdjectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSIEST() { return GetToken(StanleyParser.CLOSIEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FURTHEST() { return GetToken(StanleyParser.FURTHEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM() { return GetToken(StanleyParser.RANDOM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEAKEST() { return GetToken(StanleyParser.WEAKEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRONGEST() { return GetToken(StanleyParser.STRONGEST, 0); }
		public SelectionAdjectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionAdjective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionAdjective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionAdjectiveContext selectionAdjective() {
		SelectionAdjectiveContext _localctx = new SelectionAdjectiveContext(Context, State);
		EnterRule(_localctx, 38, RULE_selectionAdjective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 49283072L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertAdjectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(StanleyParser.UNIQUE, 0); }
		public AssertAdjectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertAdjective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertAdjective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertAdjectiveContext assertAdjective() {
		AssertAdjectiveContext _localctx = new AssertAdjectiveContext(Context, State);
		EnterRule(_localctx, 40, RULE_assertAdjective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(UNIQUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeStepContext timeStep() {
			return GetRuleContext<TimeStepContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public TimeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeExpressionContext timeExpression() {
		TimeExpressionContext _localctx = new TimeExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_timeExpression);
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193;
				integer();
				State = 194;
				timeStep();
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196;
				@float();
				State = 197;
				timeStep();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDS() { return GetToken(StanleyParser.SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTES() { return GetToken(StanleyParser.MINUTES, 0); }
		public TimeStepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStepContext timeStep() {
		TimeStepContext _localctx = new TimeStepContext(Context, State);
		EnterRule(_localctx, 44, RULE_timeStep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(StanleyParser.STRING_LITERAL, 0); }
		public SubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubjectContext subject() {
		SubjectContext _localctx = new SubjectContext(Context, State);
		EnterRule(_localctx, 46, RULE_subject);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(StanleyParser.STRING_LITERAL, 0); }
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 48, RULE_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdLiteralContext idLiteral() {
			return GetRuleContext<IdLiteralContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 50, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			idLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportVariableLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR_SYMB() { return GetToken(StanleyParser.DOLLAR_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdLiteralContext idLiteral() {
			return GetRuleContext<IdLiteralContext>(0);
		}
		public ImportVariableLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importVariableLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportVariableLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportVariableLiteralContext importVariableLiteral() {
		ImportVariableLiteralContext _localctx = new ImportVariableLiteralContext(Context, State);
		EnterRule(_localctx, 52, RULE_importVariableLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(DOLLAR_SYMB);
			State = 210;
			idLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(StanleyParser.DECIMAL_LITERAL, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 54, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(DECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(StanleyParser.REAL_LITERAL, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 56, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(REAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(StanleyParser.ID, 0); }
		public IdLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdLiteralContext idLiteral() {
		IdLiteralContext _localctx = new IdLiteralContext(Context, State);
		EnterRule(_localctx, 58, RULE_idLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,56,219,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,1,0,1,0,4,0,63,8,0,11,0,12,0,64,1,1,1,1,1,1,1,2,1,2,3,2,72,8,
		2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,3,4,81,8,4,1,5,1,5,1,5,5,5,86,8,5,10,5,12,
		5,89,9,5,1,5,1,5,1,6,1,6,3,6,95,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,113,8,7,1,8,1,8,1,8,1,8,3,8,119,8,8,
		1,9,3,9,122,8,9,1,9,1,9,3,9,126,8,9,1,9,3,9,129,8,9,1,10,1,10,1,10,1,10,
		3,10,135,8,10,1,11,1,11,3,11,139,8,11,1,12,1,12,1,12,4,12,144,8,12,11,
		12,12,12,145,1,13,1,13,3,13,150,8,13,1,14,1,14,3,14,154,8,14,1,15,1,15,
		1,15,5,15,159,8,15,10,15,12,15,162,9,15,1,15,1,15,1,15,1,16,1,16,1,16,
		1,16,1,16,1,16,3,16,173,8,16,1,17,1,17,3,17,177,8,17,1,18,1,18,1,18,5,
		18,182,8,18,10,18,12,18,185,9,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,
		21,1,21,1,21,1,21,1,21,1,21,3,21,200,8,21,1,22,1,22,1,23,1,23,1,24,1,24,
		1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,0,0,30,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,0,4,1,0,15,16,2,0,10,10,13,13,2,0,20,23,25,25,1,0,26,27,210,0,
		60,1,0,0,0,2,66,1,0,0,0,4,71,1,0,0,0,6,73,1,0,0,0,8,80,1,0,0,0,10,82,1,
		0,0,0,12,94,1,0,0,0,14,112,1,0,0,0,16,118,1,0,0,0,18,128,1,0,0,0,20,134,
		1,0,0,0,22,138,1,0,0,0,24,140,1,0,0,0,26,149,1,0,0,0,28,153,1,0,0,0,30,
		155,1,0,0,0,32,172,1,0,0,0,34,176,1,0,0,0,36,178,1,0,0,0,38,189,1,0,0,
		0,40,191,1,0,0,0,42,199,1,0,0,0,44,201,1,0,0,0,46,203,1,0,0,0,48,205,1,
		0,0,0,50,207,1,0,0,0,52,209,1,0,0,0,54,212,1,0,0,0,56,214,1,0,0,0,58,216,
		1,0,0,0,60,62,3,2,1,0,61,63,3,4,2,0,62,61,1,0,0,0,63,64,1,0,0,0,64,62,
		1,0,0,0,64,65,1,0,0,0,65,1,1,0,0,0,66,67,5,6,0,0,67,68,3,46,23,0,68,3,
		1,0,0,0,69,72,3,6,3,0,70,72,3,8,4,0,71,69,1,0,0,0,71,70,1,0,0,0,72,5,1,
		0,0,0,73,74,5,5,0,0,74,75,3,22,11,0,75,76,5,11,0,0,76,77,3,46,23,0,77,
		7,1,0,0,0,78,81,3,12,6,0,79,81,3,10,5,0,80,78,1,0,0,0,80,79,1,0,0,0,81,
		9,1,0,0,0,82,87,3,42,21,0,83,84,5,9,0,0,84,86,3,42,21,0,85,83,1,0,0,0,
		86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,87,1,0,0,0,
		90,91,5,17,0,0,91,11,1,0,0,0,92,95,3,14,7,0,93,95,3,16,8,0,94,92,1,0,0,
		0,94,93,1,0,0,0,95,13,1,0,0,0,96,97,3,20,10,0,97,98,5,19,0,0,98,99,3,16,
		8,0,99,113,1,0,0,0,100,101,3,28,14,0,101,102,5,18,0,0,102,103,3,16,8,0,
		103,113,1,0,0,0,104,105,3,20,10,0,105,106,5,16,0,0,106,107,3,16,8,0,107,
		113,1,0,0,0,108,109,3,28,14,0,109,110,7,0,0,0,110,111,3,16,8,0,111,113,
		1,0,0,0,112,96,1,0,0,0,112,100,1,0,0,0,112,104,1,0,0,0,112,108,1,0,0,0,
		113,15,1,0,0,0,114,115,3,50,25,0,115,116,3,18,9,0,116,119,1,0,0,0,117,
		119,3,50,25,0,118,114,1,0,0,0,118,117,1,0,0,0,119,17,1,0,0,0,120,122,7,
		1,0,0,121,120,1,0,0,0,121,122,1,0,0,0,122,123,1,0,0,0,123,129,3,32,16,
		0,124,126,7,1,0,0,125,124,1,0,0,0,125,126,1,0,0,0,126,127,1,0,0,0,127,
		129,3,34,17,0,128,121,1,0,0,0,128,125,1,0,0,0,129,19,1,0,0,0,130,131,3,
		54,27,0,131,132,3,46,23,0,132,135,1,0,0,0,133,135,3,46,23,0,134,130,1,
		0,0,0,134,133,1,0,0,0,135,21,1,0,0,0,136,139,3,24,12,0,137,139,3,26,13,
		0,138,136,1,0,0,0,138,137,1,0,0,0,139,23,1,0,0,0,140,143,3,26,13,0,141,
		142,5,9,0,0,142,144,3,26,13,0,143,141,1,0,0,0,144,145,1,0,0,0,145,143,
		1,0,0,0,145,146,1,0,0,0,146,25,1,0,0,0,147,150,3,52,26,0,148,150,3,46,
		23,0,149,147,1,0,0,0,149,148,1,0,0,0,150,27,1,0,0,0,151,154,3,30,15,0,
		152,154,3,46,23,0,153,151,1,0,0,0,153,152,1,0,0,0,154,29,1,0,0,0,155,156,
		5,8,0,0,156,160,3,38,19,0,157,159,3,40,20,0,158,157,1,0,0,0,159,162,1,
		0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,160,1,0,0,0,
		163,164,5,12,0,0,164,165,3,46,23,0,165,31,1,0,0,0,166,167,3,54,27,0,167,
		168,3,48,24,0,168,173,1,0,0,0,169,170,3,56,28,0,170,171,3,48,24,0,171,
		173,1,0,0,0,172,166,1,0,0,0,172,169,1,0,0,0,173,33,1,0,0,0,174,177,3,36,
		18,0,175,177,3,48,24,0,176,174,1,0,0,0,176,175,1,0,0,0,177,35,1,0,0,0,
		178,179,5,8,0,0,179,183,3,38,19,0,180,182,3,40,20,0,181,180,1,0,0,0,182,
		185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,185,183,1,
		0,0,0,186,187,5,12,0,0,187,188,3,48,24,0,188,37,1,0,0,0,189,190,7,2,0,
		0,190,39,1,0,0,0,191,192,5,24,0,0,192,41,1,0,0,0,193,194,3,54,27,0,194,
		195,3,44,22,0,195,200,1,0,0,0,196,197,3,56,28,0,197,198,3,44,22,0,198,
		200,1,0,0,0,199,193,1,0,0,0,199,196,1,0,0,0,200,43,1,0,0,0,201,202,7,3,
		0,0,202,45,1,0,0,0,203,204,5,51,0,0,204,47,1,0,0,0,205,206,5,51,0,0,206,
		49,1,0,0,0,207,208,3,58,29,0,208,51,1,0,0,0,209,210,5,50,0,0,210,211,3,
		58,29,0,211,53,1,0,0,0,212,213,5,52,0,0,213,55,1,0,0,0,214,215,5,53,0,
		0,215,57,1,0,0,0,216,217,5,54,0,0,217,59,1,0,0,0,20,64,71,80,87,94,112,
		118,121,125,128,134,138,145,149,153,160,172,176,183,199
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace HereticalSolutions.StanleyScript.Grammars
